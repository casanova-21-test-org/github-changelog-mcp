name: Copilot CLI Agent Weekly Report

on:
  workflow_dispatch:
    inputs:
      prompt:
        description: 'Custom prompt to send to Copilot CLI agent'
        required: false
        default: 'Hello world! Please analyze this GitHub Changelog MCP Server project and provide a brief summary of its purpose and architecture.'
        type: string

jobs:
  copilot-cli-weekly-report:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: Build Docker Image for MCP Server
        run: |
          echo "🐳 Building GitHub Changelog MCP Server Docker image..."
          docker build -t github-changelog-mcp:latest .

      - name: Configure MCP servers for Copilot CLI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🔧 Setting up GitHub Changelog MCP Server for Copilot CLI..."
          
          # Create Copilot CLI config directory
          mkdir -p ~/.config/copilot
          
          # Test that the MCP server Docker container works first
          echo "🧪 Testing MCP server Docker container startup..."
          timeout 5s docker run --rm github-changelog-mcp:latest 2>&1 | grep -q "GitHub Changelog MCP Server running on stdio" && echo "✅ MCP Server Docker container can start successfully" || echo "⚠️ MCP Server Docker test inconclusive but proceeding"
          
          # Create MCP server configuration for Copilot CLI using Docker directly
          cat > ~/.config/copilot/mcp.json << EOF
          {
            "servers": {
              "github-changelog": {
                "command": "docker",
                "args": ["run", "--rm", "-i", "github-changelog-mcp:latest"],
                "cwd": "/tmp"
              },
              "github": {
                "command": "npx",
                "args": ["-y", "@modelcontextprotocol/server-github"],
                "cwd": "/tmp",
                "env": {
                  "GITHUB_PERSONAL_ACCESS_TOKEN": "${GITHUB_TOKEN}"
                }
              }
            }
          }
          EOF
          
          echo "✅ MCP Server Docker configuration created"
          cat ~/.config/copilot/mcp.json

      - name: Install GitHub Copilot CLI
        run: |
          npm install -g @github/copilot

      - name: Verify MCP configuration
        run: |
          echo "🔍 MCP configuration:"
          cat ~/.config/copilot/mcp.json
          echo "🧪 Testing Docker image with MCP protocol:"
          echo '{"jsonrpc":"2.0","id":1,"method":"initialize","params":{"protocolVersion":"2024-11-05","capabilities":{},"clientInfo":{"name":"test","version":"1.0.0"}}}' | docker run --rm -i github-changelog-mcp:latest

      - name: Generate Weekly Copilot Report and Create Issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "📅 Generating weekly Copilot changelog report and creating GitHub issue..."
          
          # Debug authentication
          echo "🔍 Checking authentication setup:"
          echo "GITHUB_TOKEN is set: $([ -n "$GITHUB_TOKEN" ] && echo "Yes" || echo "No")"
          echo "GH_TOKEN is set: $([ -n "$GH_TOKEN" ] && echo "Yes" || echo "No")"
          
          # Verify Copilot CLI can authenticate
          echo "🔐 Testing Copilot CLI authentication..."
          copilot --version
          
          # Use Copilot CLI with explicit MCP server reference
          copilot -p "I need you to use two MCP servers that are configured: 'github-changelog' and 'github'. Please: 1) Use the github-changelog MCP server to get all Copilot-related changelog entries from this week, 2) Filter by COPILOT category, 3) Sort results by General Availability (🚢), Preview (👀), and Deprecated (⚓), 4) Add brief summaries under 40 words each with linkable URLs, 5) Generate a professional markdown report, 6) Use the 'github' MCP server to create a new issue in the repository '${{ github.repository }}' with the title 'Weekly Copilot Report - $(date +%Y-%m-%d)' and the formatted report as the issue body. Make it professional and well-formatted." --allow-all-tools
          
          echo ""
          echo "✅ Weekly Copilot report generated and GitHub issue created successfully!"