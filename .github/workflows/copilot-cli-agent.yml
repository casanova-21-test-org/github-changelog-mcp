name: Copilot CLI Agent Hello World

on:
  workflow_dispatch:
    inputs:
      prompt:
        description: 'Custom prompt to send to Copilot CLI agent'
        required: false
        default: 'Hello world! Please analyze this GitHub Changelog MCP Server project and provide a brief summary of its purpose and architecture.'
        type: string

jobs:
  copilot-cli-hello:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Install GitHub Copilot CLI
        run: |
          npm install -g @github/copilot

      - name: Check Copilot Access
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîç Checking Copilot access and permissions..."
          
          # Check if we can access GitHub API
          curl -H "Authorization: Bearer $GITHUB_TOKEN" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/user \
               | jq '.login // "No access"' || echo "API call failed"
          
          # Check if organization has Copilot enabled (this might fail but gives us info)
          curl -H "Authorization: Bearer $GITHUB_TOKEN" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/orgs/${{ github.repository_owner }} \
               | jq '.plan.name // "Unknown plan"' || echo "Org info not accessible"

      - name: Execute Copilot CLI Agent Hello World
        env:
          GITHUB_TOKEN: ${{ secrets.COPILOT_TOKEN }}
          GH_TOKEN: ${{ secrets.COPILOT_TOKEN }}
        run: |
          echo "ü§ñ Starting Copilot CLI Agent..."
          echo "üìù Prompt: ${{ github.event.inputs.prompt }}"
          echo ""
          
          # Debug authentication
          echo "üîë Debugging authentication..."
          echo "GITHUB_TOKEN length: ${#GITHUB_TOKEN}"
          echo "GH_TOKEN length: ${#GH_TOKEN}"
          echo "Token starts with: ${GITHUB_TOKEN:0:7}..."
          
          # Try to validate the token format
          if [[ $GITHUB_TOKEN =~ ^gh[ps]_ ]]; then
            echo "‚úÖ Token appears to be a valid GitHub token format"
          else
            echo "‚ö†Ô∏è Token format may be incorrect (should start with ghp_ or ghs_)"
          fi
          
          # First try: Use default GITHUB_TOKEN as fallback
          echo "üîÑ Trying with repository GITHUB_TOKEN as fallback..."
          export GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"
          export GH_TOKEN="${{ secrets.GITHUB_TOKEN }}"
          
          # Execute the Copilot CLI in programmatic mode with the provided prompt
          echo "üöÄ Executing Copilot CLI..."
          copilot -p "${{ github.event.inputs.prompt }}" --allow-all-tools
          
          echo ""
          echo "‚úÖ Copilot CLI Agent execution completed!"

      - name: Test MCP Server Integration
        env:
          GITHUB_TOKEN: ${{ secrets.COPILOT_TOKEN }}
          GH_TOKEN: ${{ secrets.COPILOT_TOKEN }}
        run: |
          echo "üß™ Testing MCP Server as context for Copilot..."
          
          # Run a quick test to ensure the MCP server is working
          npm run test
          
          # Ask Copilot to explain the test results using programmatic mode
          copilot -p "Explain what the npm run test output means for this TypeScript MCP server project and whether the tests passed successfully" --allow-all-tools

      - name: Generate Project Summary
        env:
          GITHUB_TOKEN: ${{ secrets.COPILOT_TOKEN }}
          GH_TOKEN: ${{ secrets.COPILOT_TOKEN }}
        run: |
          echo "üìä Generating project summary with Copilot CLI..."
          
          # Use Copilot to analyze the project structure
          copilot -p "Analyze the files in this GitHub Changelog MCP Server project and explain what each main component does. Focus on the src/ directory and key configuration files." --allow-all-tools
          
          echo ""
          echo "üéâ Workflow completed successfully!"