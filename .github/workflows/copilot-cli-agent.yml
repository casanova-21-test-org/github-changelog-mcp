name: Copilot CLI Agent Hello World

on:
  workflow_dispatch:
    inputs:
      prompt:
        description: 'Custom prompt to send to Copilot CLI agent'
        required: false
        default: 'Hello world! Please analyze this GitHub Changelog MCP Server project and provide a brief summary of its purpose and architecture.'
        type: string

jobs:
  copilot-cli-hello:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Setup MCP Server for Copilot CLI
        run: |
          echo "üîß Setting up GitHub Changelog MCP Server for Copilot CLI..."
          
          # Create Copilot CLI config directory
          mkdir -p ~/.copilot
          
          # Create MCP server configuration for Copilot CLI
          cat > ~/.copilot/config.json << 'EOF'
          {
            "mcp_servers": {
              "github-changelog": {
                "command": "node",
                "args": ["dist/index.js"],
                "cwd": "${{ github.workspace }}",
                "description": "GitHub Changelog MCP Server - Access to GitHub changelog entries"
              }
            },
            "trusted_folders": ["${{ github.workspace }}"]
          }
          EOF
          
          echo "‚úÖ MCP Server configuration created"
          cat ~/.copilot/config.json

      - name: Install GitHub Copilot CLI
        run: |
          npm install -g @github/copilot

      - name: Check Copilot Access
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîç Checking Copilot access and permissions..."
          
          # Check if we can access GitHub API
          curl -H "Authorization: Bearer $GITHUB_TOKEN" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/user \
               | jq '.login // "No access"' || echo "API call failed"
          
          # Check if organization has Copilot enabled (this might fail but gives us info)
          curl -H "Authorization: Bearer $GITHUB_TOKEN" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/orgs/${{ github.repository_owner }} \
               | jq '.plan.name // "Unknown plan"' || echo "Org info not accessible"

      - name: Execute Copilot CLI Agent with MCP Server
        env:
          GITHUB_TOKEN: ${{ secrets.COPILOT_TOKEN }}
          GH_TOKEN: ${{ secrets.COPILOT_TOKEN }}
        run: |
          echo "ü§ñ Starting Copilot CLI Agent..."
          echo "üìù Prompt: ${{ github.event.inputs.prompt }}"
          echo ""
          
          # Debug authentication
          echo "üîë Debugging authentication..."
          echo "GITHUB_TOKEN length: ${#GITHUB_TOKEN}"
          echo "GH_TOKEN length: ${#GH_TOKEN}"
          echo "Token starts with: ${GITHUB_TOKEN:0:7}..."
          
          # Try to validate the token format
          if [[ $GITHUB_TOKEN =~ ^gh[ps]_ ]]; then
            echo "‚úÖ Token appears to be a valid GitHub token format"
          else
            echo "‚ö†Ô∏è Token format may be incorrect (should start with ghp_ or ghs_)"
          fi
          
          # Test API access with the PAT
          echo "ÔøΩ Testing API access with your PAT..."
          curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/user \
               | jq -r '.login // "API call failed"' || echo "‚ùå API test failed"
          
          # Test MCP server is working
          echo "üß™ Testing MCP Server..."
          timeout 10s node dist/index.js < /dev/null &
          MCP_PID=$!
          sleep 2
          if kill -0 $MCP_PID 2>/dev/null; then
            echo "‚úÖ MCP Server is running (PID: $MCP_PID)"
            kill $MCP_PID
          else
            echo "‚ùå MCP Server failed to start"
          fi
          
          # Execute the Copilot CLI with MCP server integration
          echo "üöÄ Executing Copilot CLI with MCP Server access..."
          copilot -p "Use the github-changelog MCP server to ${{ github.event.inputs.prompt }}. The server provides tools to get changelog entries, search them, and filter by categories like COPILOT." --allow-all-tools
          
          echo ""
          echo "‚úÖ Copilot CLI Agent execution completed!"

      - name: Get This Week's Copilot Changelog Entries
        env:
          GITHUB_TOKEN: ${{ secrets.COPILOT_TOKEN }}
          GH_TOKEN: ${{ secrets.COPILOT_TOKEN }}
        run: |
          echo "üìÖ Getting this week's Copilot changelog entries using MCP Server..."
          
          # Run a quick test to ensure the MCP server is working
          npm run test
          
          # Ask Copilot to get this week's Copilot entries using the MCP server
          copilot -p "Use the github-changelog MCP server to get all Copilot-related changelog entries from this week (October 6-10, 2025). Filter by the COPILOT category and show the results sorted by General Availability, Preview, and Deprecated entries." --allow-tool 'github-changelog' --allow-all-tools

      - name: Generate Weekly Copilot Report
        env:
          GITHUB_TOKEN: ${{ secrets.COPILOT_TOKEN }}
          GH_TOKEN: ${{ secrets.COPILOT_TOKEN }}
        run: |
          echo "üìä Generating weekly Copilot report using MCP Server..."
          
          # Use Copilot to create a comprehensive weekly report
          copilot -p "Use the github-changelog MCP server to create a comprehensive weekly Copilot report for October 6-10, 2025. Include: 1) All Copilot entries from this week, 2) Categorize them as GA (üö¢), Preview (üëÄ), or Deprecated (‚öì), 3) Add brief summaries under 40 words each, 4) Format as a professional report with markdown. Use the MCP server's filtering and search capabilities." --allow-tool 'github-changelog' --allow-all-tools
          
          echo ""
          echo "üéâ Weekly Copilot report generated successfully!"