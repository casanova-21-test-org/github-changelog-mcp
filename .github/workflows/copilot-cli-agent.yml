name: Copilot CLI Agent Weekly Report

on:
  workflow_dispatch:
    inputs:
      prompt:
        description: 'Custom prompt to send to Copilot CLI agent'
        required: false
        default: 'Hello world! Please analyze this GitHub Changelog MCP Server project and provide a brief summary of its purpose and architecture.'
        type: string

jobs:
  copilot-cli-weekly-report:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: Build Docker Image for MCP Server
        run: |
          echo "🐳 Building GitHub Changelog MCP Server Docker image..."
          docker build -t github-changelog-mcp:latest .

      - name: Setup MCP Server for Copilot CLI
        run: |
          echo "🔧 Setting up GitHub Changelog MCP Server for Copilot CLI..."
          
          # Create Copilot CLI config directory
          mkdir -p ~/.copilot
          
          # Test that the MCP server Docker container works first
          echo "🧪 Testing MCP server Docker container startup..."
          timeout 5s docker run --rm github-changelog-mcp:latest 2>&1 | grep -q "GitHub Changelog MCP Server running on stdio" && echo "✅ MCP Server Docker container can start successfully" || echo "⚠️ MCP Server Docker test inconclusive but proceeding"
          
          # Create wrapper script for Docker-based MCP server
          cat > ~/.copilot/docker-mcp-wrapper.sh << 'EOF'
          #!/bin/bash
          exec docker run --rm -i github-changelog-mcp:latest
          EOF
          chmod +x ~/.copilot/docker-mcp-wrapper.sh
          
          # Create MCP server configuration for Copilot CLI using Docker wrapper
          cat > ~/.copilot/config.json << EOF
          {
            "mcp_servers": {
              "github-changelog": {
                "command": "/home/runner/.copilot/docker-mcp-wrapper.sh",
                "args": [],
                "cwd": "${{ github.workspace }}",
                "description": "GitHub Changelog MCP Server - Access to GitHub changelog entries (Docker)"
              }
            },
            "trusted_folders": ["${{ github.workspace }}", "/tmp", "/home/runner"]
          }
          EOF
          
          echo "✅ MCP Server Docker configuration created"
          cat ~/.copilot/config.json
          cat ~/.copilot/docker-mcp-wrapper.sh

      - name: Install GitHub Copilot CLI
        run: |
          npm install -g @github/copilot

      - name: Generate Weekly Copilot Report and Create Issue
        env:
          GITHUB_TOKEN: ${{ secrets.COPILOT_TOKEN }}
          GH_TOKEN: ${{ secrets.COPILOT_TOKEN }}
        run: |
          echo "📅 Generating weekly Copilot changelog report and creating GitHub issue..."
          
          # Debug MCP server configuration
          echo "🔍 Copilot CLI config:"
          cat ~/.copilot/config.json || echo "No config found"
          
          # Ensure we're in the right directory and MCP server is accessible
          cd "${{ github.workspace }}"
          echo "📂 Current directory: $(pwd)"
          echo "📋 MCP Server file: $(ls -la dist/index.js)"
          
          # Use Copilot CLI with explicit MCP server reference
          copilot -p "I need you to use the MCP server named 'github-changelog' that is configured in your MCP servers. This server provides tools to get GitHub changelog entries. Please: 1) Use the github-changelog MCP server to get all Copilot-related changelog entries from this week, 2) Filter by COPILOT category, 3) Sort results by General Availability (🚢), Preview (👀), and Deprecated (⚓), 4) Add brief summaries under 40 words each with linkable URLs, 5) Use the GitHub MCP server to create a new issue in this repository titled 'Weekly Copilot Report - [Current Date]' with the formatted report as the issue body. Make it professional and well-formatted." --allow-all-tools
          
          echo ""
          echo "✅ Weekly Copilot report generated and GitHub issue created successfully!"